#
# By Chih-Wei Huang <cwhuang@linux.org.tw>
# Last updated 2017/04/23
#
# License: GNU Public License
# We explicitely grant the right to use the scripts
# with Android-x86 project.
#

getDeviceFile()
{
	local device=$1
	local option=$2
	local name=$3
	local i

	if [ -n "$device" ]; then
		if [ -e "$device" ] && echo "$device" | grep -qe '^\/dev\/'; then
			device="$(readlink -f "$device")"
			local dev="/dev/block/$(basename "$device")"

			if [ ! -e "$dev" ]; then
				ln -s "$device" "$dev"
			fi

			echo "$dev"

			return 0

		elif [ -f "$SRCDST/$(echo "$device" | sed 's/^\///')" ] || [ -f "$device" ]; then
			if [ -f "$SRCDST/$(echo "$device" | sed 's/^\///')" ]; then
				device="$SRCDST/$(echo "$device" | sed 's/^\///')"
			fi

			# Check to see if this file is an actual file system contained file
			# or something like a cpio.gz file (ramdisk)
			if [ "$option" != "nodev" ] || ! zcat -t "$device" >/dev/null 2>&1; then
				for i in $(seq 0 9); do
					if ! losetup /dev/loop$i >/dev/null 2>&1; then
						if losetup /dev/loop$i "$(readlink -f "$device")" >/dev/null 2>&1; then
							local dev="/dev/block/loop$i"

							ln -s "/dev/loop$i" "$dev"
							echo "$dev"

							return 0
						fi
					fi
				done

			else
				echo "$(readlink -f "$device")"
				return 0
			fi

			return 1
		fi

		# So far I have never seen any x86 android kernels that supports /dev/disk/
		# but in case there is one or there will be in the future, let's
		# start by checking that, before using blkid to do a search.

		if echo "$device" | grep -qe '^LABEL='; then
			local label="$(echo $device | cut -d '=' -f 2)"

			if [ -e "/dev/disk/by-label/$label" ]; then
				echo $(getDeviceFile "/dev/disk/by-label/$label" "$option" "$name")
				return $?
			fi

			device="LABEL=\"$label\""

		elif echo "$device" | grep -qe '^UUID='; then
			local uuid="$(echo $device | cut -d '=' -f 2)"

			if [ -e "/dev/disk/by-uuid/$uuid" ]; then
				echo $(getDeviceFile "/dev/disk/by-uuid/$uuid" "$option" "$name")
				return $?
			fi

			device="UUID=\"$uuid\""

		elif echo "$device" | grep -qe '^PARTLABEL='; then
			local label="$(echo $device | cut -d '=' -f 2)"

			if [ -e "/dev/disk/by-partlabel/$label" ]; then
				echo $(getDeviceFile "/dev/disk/by-partlabel/$label" "$option" "$name")
				return $?
			fi

			device="PARTLABEL=\"$label\""

		elif echo "$device" | grep -qe '^PARTUUID=='; then
			local uuid="$(echo $device | cut -d '=' -f 2)"

			if [ -e "/dev/disk/by-partuuid/$uuid" ]; then
				echo $(getDeviceFile "/dev/disk/by-partuuid/$uuid" "$option" "$name")
				return $?
			fi

			device="PARTUUID=\"$uuid\""

		else
			device=
		fi

		if [ -n "$device" ]; then
			for i in $(blkid | grep "$device" | cut -d ':' -f 1); do
				if [ -e "$i" ] && echo "$i" | grep -qe '^\/dev\/'; then
					echo $(getDeviceFile "$i" "$option" "$name")
					return $?
				fi
			done
		fi

		# We are looking for the root partition, the one we booted from
		if [ "$name" = "root" ] && [ "$option" != "internal" ]; then
			for i in $(blkid | cut -d ':' -f 1); do
				if mount "$i" "$SRCDST" >/dev/null 2>&1; then
					if [ -f "${SRCDST}${BOOT_IMAGE:-/kernel}" ]; then
						echo $(getDeviceFile "$i" "internal" "$name")
						local res=$?
						umount "$SRCDST" >/dev/null 2>&1

						return $res
					fi

					umount "$SRCDST" >/dev/null 2>&1
				fi
			done
		fi
	fi

	if [ -n "$FSTAB" ] && device="$(grep -e "\(\s\)\+/$name\(\s\)\+" "$FSTAB")"; then
		echo $(getDeviceFile "$(echo "$device" | sed 's/^\([^ \t]\+\).*/\1/')" "$option" "$name")
		return $?
	fi

	return 1
}

mount_data()
{
	mountpoint -q data && return
	if [ -n "$DATA" ]; then
		device="$(getDeviceFile "$DATA" default data)"
		blk=$(basename $device)
		if [ -b "$device" ]; then
			mount -o noatime /dev/block/$blk data
		elif [ "$DATA" = "9p" ]; then
			modprobe 9pnet_virtio
			mount -t 9p -o trans=virtio data data -oversion=9p2000.L,posixacl,cache=loose
		elif [ "$DATA" = "virtiofs" ]; then
			mount -t virtiofs -o nosuid,nodev,noatime data data
		else
			remount_rw
			mkdir -p /mnt/$SRC/$DATA
			mount --bind /mnt/$SRC/$DATA data
		fi
	elif [ -d /mnt/$SRC/data ]; then
		remount_rw
		mount --bind /mnt/$SRC/data data
	elif [ -f /mnt/$SRC/data.img ]; then
		remount_rw
		mount -o loop,noatime /mnt/$SRC/data.img data
	else
		device_mount_data || mount -t tmpfs tmpfs data
	fi
}

mount_sdcard()
{
	mountpoint -q sdcard && return
	if [ -n "$SDCARD" -a -e /mnt/$SRC$SDCARD ]; then
		if [ ! -e /android$SDCARD ]; then
			remount_rw
			sddir=`dirname $SDCARD`
			mkdir /android$sddir
			mount --bind /mnt/$SRC$sddir /android$sddir
		fi
	elif [ "$SDCARD" = "premount" ]; then
	# WARNING: premount the sdcard is deprecated since froyo-x86.
	# It is left only for backward compatibility and may be removed
	# in the future.
		if [ -d /mnt/$SRC/sdcard ]; then
			remount_rw
			mount --bind /mnt/$SRC/sdcard mnt/sdcard
		elif [ -d data/sdcard ]; then
			mount --bind data/sdcard mnt/sdcard
		else
			mount -o mode=2777,uid=1000,gid=1015 -t tmpfs tmpfs mnt/sdcard
		fi
	fi
}
