#!/bin/busybox sh
#
# By Chih-Wei Huang <cwhuang@linux.org.tw>
# and Thorsten Glaser <tg@mirbsd.org>
#
# License: GNU Public License
# We explicitely grant the right to use the scripts
# with Android-x86 project.
#

PATH=/sbin:/bin:/system/bin:/system/xbin:/vendor/bin:/system/vendor/bin; export PATH

# ASCII art
text_art()
{
cat << "EOF"
      ___           ___                   ___           ___      
     /\  \         /\__\      ___        /\  \         /\  \     
    /::\  \       /:/  /     /\  \      /::\  \       /::\  \    
   /:/\:\  \     /:/  /      \:\  \    /:/\ \  \     /:/\ \  \   
  /::\~\:\__\   /:/  /       /::\__\  _\:\~\ \  \   _\:\~\ \  \  
 /:/\:\ \:\__\ /:/__/     __/:/\/__/ /\ \:\ \ \__\ /\ \:\ \ \__\ 
 \:\~\:\/:/  / \:\  \    /\/:/  /    \:\ \:\ \/__/ \:\ \:\ \/__/ 
  \:\ \::/  /   \:\  \   \::/__/      \:\ \:\__\    \:\ \:\__\   
   \:\/:/  /     \:\  \   \:\__\       \:\/:/  /     \:\/:/  /   
    \::/__/       \:\__\   \/__/        \::/  /       \::/  /    
     ~~            \/__/                 \/__/         \/__/     

===================================================
         Have A Truly Blissful Experience
===================================================
EOF
}

# auto installation
if [ -n "$AUTO_INSTALL" ]; then
	echo -n "This will replace all operating-systems on this device with a read-only version of this OS. Are you sure you want to continue (y/n)? "
	read answer
	if [ "$answer" != "${answer#[Yy]}" ] ;then
		echo "Booting in Live Mode instead"
	else
		echo "Starting Installer"
		INSTALL=1
	fi
fi

# configure debugging output
if [ -n "$DEBUG" -o -n "$INSTALL" ]; then
	LOG=/tmp/log
	set -x
else
	LOG=/dev/null
	test -e "$LOG" || busybox mknod $LOG c 1 3
fi
exec 2>> $LOG

# early boot
if test x"$HAS_CTTY" != x"Yes"; then
	# initialise /proc and /sys
	busybox mount -t proc proc /proc
	busybox mount -t sysfs sys /sys
	# let busybox install all applets as symlinks
	busybox --install -s
	# spawn shells on tty 2 and 3 if debug or installer
	if test -n "$DEBUG" || test -n "$INSTALL"; then
		# ensure they can open a controlling tty
		mknod /dev/tty c 5 0
		# create device nodes then spawn on them
		mknod /dev/tty2 c 4 2 && openvt
		mknod /dev/tty3 c 4 3 && openvt
	fi
	if test -z "$DEBUG" || test -n "$INSTALL"; then
		echo 0 0 0 0 > /proc/sys/kernel/printk
	fi
	# populate /dev
	echo /sbin/mdev > /proc/sys/kernel/hotplug
	mdev -s
	sleep 3
	# initialise /dev (first time)
	mkdir -p /dev/block
	echo 0 > /proc/sys/kernel/printk
	# re-run this script with a controlling tty
	exec env HAS_CTTY=Yes setsid cttyhack /bin/sh "$0" "$@"
fi

# now running under a controlling tty; debug output from stderr into log file
# boot up Android

chmod 755 /sbin/mount.ntfs-3g

error()
{
	echo $*
	return 1
}

try_mount()
{
	RW=$1; shift
	if [ "${ROOT#*:/}" != "$ROOT" ]; then
		# for NFS roots, use nolock to avoid dependency to portmapper
		mount -o $RW,noatime,nolock $@
		return $?
	fi
	case $(blkid $1) in
		*TYPE=*ntfs*)
			mount.ntfs-3g -o rw,force $@
			;;
		*TYPE=*)
			mount -o $RW,noatime $@
			;;
		*)
			return 1
			;;
	esac
}

check_root()
{
	if [ "`dirname $1`" = "/dev" ]; then
		[ -e $1 ] || return 1
		blk=`basename $1`
		[ ! -e /dev/block/$blk ] && ln $1 /dev/block
		dev=/dev/block/$blk
	else
		dev=$1
	fi
	try_mount ro $dev /mnt || return 1
	if [ -n "$iso" -a -e /mnt/$iso ]; then
		mount --move /mnt /iso
		mkdir /mnt/iso
		mount -o loop /iso/$iso /mnt/iso
	fi
	if [ -e /mnt/$SRC/system.sfs ]; then
		mount -o loop,noatime /mnt/$SRC/system.sfs android
		if [ -e android/system.img ]; then
			mount --move android /sfs
			mount -o loop,noatime /sfs/system.img android
		fi
	elif [ -e /mnt/$SRC/system.efs ]; then
		mount -o loop,noatime /mnt/$SRC/system.efs android
		if [ -e android/system.img ]; then
			mount --move android /sfs
			mount -o loop,noatime /sfs/system.img android
		fi
	elif [ -e /mnt/$SRC/system.img ]; then
		remount_rw
		mount -o loop,noatime /mnt/$SRC/system.img android
	elif [ -s /mnt/$SRC/system/default.prop ]; then
		remount_rw
		mount --bind /mnt/$SRC/system android
	elif [ -z "$SRC" -a -s /mnt/default.prop ]; then
		mount --bind /mnt android
	else
		return 1
	fi
	echo " Found at $1"
	rm /sbin/mke2fs
	hash -r
	text_art
}

remount_rw()
{
	# "foo" as mount source is given to workaround a Busybox bug with NFS
	# - as it's ignored anyways it shouldn't harm for other filesystems.
	mount -o remount,rw foo /mnt
}

debug_shell()
{
	if [ -x system/bin/sh ]; then
		echo Running MirBSD Korn Shell...
		USER="($1)" system/bin/sh -l 2>&1
		[ $? -ne 0 ] && /bin/sh 2>&1
	else
		echo Running busybox ash...
		busybox sh 2>&1
	fi
}

echo "Detecting Android-x86..."
echo ""
echo "If it took too long to detect, reboot and check your installtion folder"
echo ""

[ -z "$SRC" -a -n "$BOOT_IMAGE" ] && SRC=`dirname $BOOT_IMAGE`

for c in `cat /proc/cmdline`; do
	case $c in
		iso-scan/filename=*)
			SRC=iso
			eval `echo $c | cut -b1-3,18-`
			;;
		*)
			;;
	esac
done

cd /
while :; do
	for device in ${ROOT:-/dev/[hmnsvx][dmrv][0-9a-z]*}; do
		check_root $device && break 2
		mountpoint -q /mnt && umount /mnt
	done
	sleep 1
	echo -n .
done

if ! grep 'sse4_2' /proc/cpuinfo 1>/dev/null; then {
  printf 'WARNING: Your CPU does not support SSE4.2 instructions, the OS will not boot\n';
} fi
cd /android

ln -s mnt/$SRC /src
ln -s android/system /
ln -s ../system/lib/firmware ../system/lib/modules /lib
mkdir -p /lib/modules
ln -s ../system/lib/modules /lib/modules/`uname -r`

if [ -d system/apex/com.android.runtime.debug ]; then
	ln -s ../android/system/apex/com.android.runtime.debug /apex/com.android.runtime
elif [ -d system/apex/com.android.runtime.release ]; then
	ln -s ../android/system/apex/com.android.runtime.release /apex/com.android.runtime
elif [ -d system/apex/com.android.runtime ]; then
	ln -s ../android/system/apex/com.android.runtime /apex/com.android.runtime
fi

if [ -n "$INSTALL" ]; then
	zcat /src/install.img | ( cd /; cpio -iud > /dev/null )
fi

# load scripts
for s in `ls /scripts/* /src/scripts/*`; do
	test -e "$s" && source $s
done

# ensure keyboard driver is loaded
if [ -n "$INSTALL" -o -n "$DEBUG" ]; then
	busybox modprobe -a atkbd hid-apple
	auto_detect &
fi

if [ 0$DEBUG -gt 0 ]; then
	echo -e "\nType 'exit' to continue booting...\n"
	debug_shell debug-found
fi

# A target should provide its detect_hardware function.
# On success, return 0 with the following values set.
# return 1 if it wants to use auto_detect
[ "$AUTO" != "1" ] && detect_hardware && FOUND=1

[ -n "$INSTALL" ] && do_install

load_modules
mount_data
mount_sdcard
setup_tslib
setup_dpi
post_detect

if [ 0$DEBUG -gt 1 ]; then
	echo -e "\nUse Alt-F1/F2/F3 to switch between virtual consoles"
	echo -e "Type 'exit' to enter Android...\n"

	debug_shell debug-late
fi

[ -n "$DEBUG" ] && SWITCH=${SWITCH:-chroot}

# We must disable mdev before switching to Android
# since it conflicts with Android's init
echo > /proc/sys/kernel/hotplug

# Use correct modprobe location
echo /system/bin/modprobe > /proc/sys/kernel/modprobe

export ANDROID_ROOT=/system

exec ${SWITCH:-switch_root} /android /init

# avoid kernel panic
while :; do
	echo
	echo '	Android-x86 console shell. Use only in emergencies.'
	echo
	debug_shell fatal-err
done
